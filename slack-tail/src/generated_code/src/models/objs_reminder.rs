/* 
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * OpenAPI spec version: 1.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ObjsReminder {
  #[serde(rename = "complete_ts")]
  complete_ts: Option<i32>,
  #[serde(rename = "creator")]
  creator: ::models::DefsUserId,
  #[serde(rename = "id")]
  id: ::models::DefsReminderId,
  #[serde(rename = "recurring")]
  recurring: bool,
  #[serde(rename = "text")]
  text: String,
  #[serde(rename = "time")]
  time: Option<i32>,
  #[serde(rename = "user")]
  user: ::models::DefsUserId
}

impl ObjsReminder {
  pub fn new(creator: ::models::DefsUserId, id: ::models::DefsReminderId, recurring: bool, text: String, user: ::models::DefsUserId) -> ObjsReminder {
    ObjsReminder {
      complete_ts: None,
      creator: creator,
      id: id,
      recurring: recurring,
      text: text,
      time: None,
      user: user
    }
  }

  pub fn set_complete_ts(&mut self, complete_ts: i32) {
    self.complete_ts = Some(complete_ts);
  }

  pub fn with_complete_ts(mut self, complete_ts: i32) -> ObjsReminder {
    self.complete_ts = Some(complete_ts);
    self
  }

  pub fn complete_ts(&self) -> Option<&i32> {
    self.complete_ts.as_ref()
  }

  pub fn reset_complete_ts(&mut self) {
    self.complete_ts = None;
  }

  pub fn set_creator(&mut self, creator: ::models::DefsUserId) {
    self.creator = creator;
  }

  pub fn with_creator(mut self, creator: ::models::DefsUserId) -> ObjsReminder {
    self.creator = creator;
    self
  }

  pub fn creator(&self) -> &::models::DefsUserId {
    &self.creator
  }


  pub fn set_id(&mut self, id: ::models::DefsReminderId) {
    self.id = id;
  }

  pub fn with_id(mut self, id: ::models::DefsReminderId) -> ObjsReminder {
    self.id = id;
    self
  }

  pub fn id(&self) -> &::models::DefsReminderId {
    &self.id
  }


  pub fn set_recurring(&mut self, recurring: bool) {
    self.recurring = recurring;
  }

  pub fn with_recurring(mut self, recurring: bool) -> ObjsReminder {
    self.recurring = recurring;
    self
  }

  pub fn recurring(&self) -> &bool {
    &self.recurring
  }


  pub fn set_text(&mut self, text: String) {
    self.text = text;
  }

  pub fn with_text(mut self, text: String) -> ObjsReminder {
    self.text = text;
    self
  }

  pub fn text(&self) -> &String {
    &self.text
  }


  pub fn set_time(&mut self, time: i32) {
    self.time = Some(time);
  }

  pub fn with_time(mut self, time: i32) -> ObjsReminder {
    self.time = Some(time);
    self
  }

  pub fn time(&self) -> Option<&i32> {
    self.time.as_ref()
  }

  pub fn reset_time(&mut self) {
    self.time = None;
  }

  pub fn set_user(&mut self, user: ::models::DefsUserId) {
    self.user = user;
  }

  pub fn with_user(mut self, user: ::models::DefsUserId) -> ObjsReminder {
    self.user = user;
    self
  }

  pub fn user(&self) -> &::models::DefsUserId {
    &self.user
  }


}



