/* 
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * OpenAPI spec version: 1.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ObjsMessage {
  #[serde(rename = "attachments")]
  attachments: Option<Vec<::models::ObjsMessageAttachments>>,
  #[serde(rename = "blocks")]
  blocks: Option<::models::Blocks>,
  #[serde(rename = "bot_id")]
  bot_id: Option<Value>,
  #[serde(rename = "bot_profile")]
  bot_profile: Option<::models::ObjsBotProfile>,
  #[serde(rename = "client_msg_id")]
  client_msg_id: Option<String>,
  #[serde(rename = "comment")]
  comment: Option<::models::ObjsComment>,
  #[serde(rename = "display_as_bot")]
  display_as_bot: Option<bool>,
  #[serde(rename = "file")]
  file: Option<::models::ObjsFile>,
  #[serde(rename = "files")]
  files: Option<Vec<::models::ObjsFile>>,
  #[serde(rename = "icons")]
  icons: Option<::models::ObjsMessageIcons>,
  #[serde(rename = "inviter")]
  inviter: Option<::models::DefsUserId>,
  #[serde(rename = "is_delayed_message")]
  is_delayed_message: Option<bool>,
  #[serde(rename = "is_intro")]
  is_intro: Option<bool>,
  #[serde(rename = "is_starred")]
  is_starred: Option<bool>,
  #[serde(rename = "last_read")]
  last_read: Option<::models::DefsTs>,
  #[serde(rename = "latest_reply")]
  latest_reply: Option<::models::DefsTs>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "old_name")]
  old_name: Option<String>,
  #[serde(rename = "parent_user_id")]
  parent_user_id: Option<::models::DefsUserId>,
  #[serde(rename = "permalink")]
  permalink: Option<String>,
  #[serde(rename = "pinned_to")]
  pinned_to: Option<Vec<::models::DefsChannel>>,
  #[serde(rename = "purpose")]
  purpose: Option<String>,
  #[serde(rename = "reactions")]
  reactions: Option<Vec<::models::ObjsReaction>>,
  #[serde(rename = "replies")]
  replies: Option<Vec<::models::ObjsMessageReplies>>,
  #[serde(rename = "reply_count")]
  reply_count: Option<i32>,
  #[serde(rename = "reply_users")]
  reply_users: Option<Vec<::models::DefsUserId>>,
  #[serde(rename = "reply_users_count")]
  reply_users_count: Option<i32>,
  #[serde(rename = "source_team")]
  source_team: Option<::models::DefsWorkspaceId>,
  #[serde(rename = "subscribed")]
  subscribed: Option<bool>,
  #[serde(rename = "subtype")]
  subtype: Option<String>,
  #[serde(rename = "team")]
  team: Option<::models::DefsWorkspaceId>,
  #[serde(rename = "text")]
  text: String,
  #[serde(rename = "thread_ts")]
  thread_ts: Option<::models::DefsTs>,
  #[serde(rename = "topic")]
  topic: Option<String>,
  #[serde(rename = "ts")]
  ts: ::models::DefsTs,
  #[serde(rename = "type")]
  _type: String,
  #[serde(rename = "unread_count")]
  unread_count: Option<i32>,
  #[serde(rename = "upload")]
  upload: Option<bool>,
  #[serde(rename = "user")]
  user: Option<::models::DefsUserId>,
  #[serde(rename = "user_profile")]
  user_profile: Option<::models::ObjsUserProfileShort>,
  #[serde(rename = "user_team")]
  user_team: Option<::models::DefsWorkspaceId>,
  #[serde(rename = "username")]
  username: Option<String>
}

impl ObjsMessage {
  pub fn new(text: String, ts: ::models::DefsTs, _type: String) -> ObjsMessage {
    ObjsMessage {
      attachments: None,
      blocks: None,
      bot_id: None,
      bot_profile: None,
      client_msg_id: None,
      comment: None,
      display_as_bot: None,
      file: None,
      files: None,
      icons: None,
      inviter: None,
      is_delayed_message: None,
      is_intro: None,
      is_starred: None,
      last_read: None,
      latest_reply: None,
      name: None,
      old_name: None,
      parent_user_id: None,
      permalink: None,
      pinned_to: None,
      purpose: None,
      reactions: None,
      replies: None,
      reply_count: None,
      reply_users: None,
      reply_users_count: None,
      source_team: None,
      subscribed: None,
      subtype: None,
      team: None,
      text: text,
      thread_ts: None,
      topic: None,
      ts: ts,
      _type: _type,
      unread_count: None,
      upload: None,
      user: None,
      user_profile: None,
      user_team: None,
      username: None
    }
  }

  pub fn set_attachments(&mut self, attachments: Vec<::models::ObjsMessageAttachments>) {
    self.attachments = Some(attachments);
  }

  pub fn with_attachments(mut self, attachments: Vec<::models::ObjsMessageAttachments>) -> ObjsMessage {
    self.attachments = Some(attachments);
    self
  }

  pub fn attachments(&self) -> Option<&Vec<::models::ObjsMessageAttachments>> {
    self.attachments.as_ref()
  }

  pub fn reset_attachments(&mut self) {
    self.attachments = None;
  }

  pub fn set_blocks(&mut self, blocks: ::models::Blocks) {
    self.blocks = Some(blocks);
  }

  pub fn with_blocks(mut self, blocks: ::models::Blocks) -> ObjsMessage {
    self.blocks = Some(blocks);
    self
  }

  pub fn blocks(&self) -> Option<&::models::Blocks> {
    self.blocks.as_ref()
  }

  pub fn reset_blocks(&mut self) {
    self.blocks = None;
  }

  pub fn set_bot_id(&mut self, bot_id: Value) {
    self.bot_id = Some(bot_id);
  }

  pub fn with_bot_id(mut self, bot_id: Value) -> ObjsMessage {
    self.bot_id = Some(bot_id);
    self
  }

  pub fn bot_id(&self) -> Option<&Value> {
    self.bot_id.as_ref()
  }

  pub fn reset_bot_id(&mut self) {
    self.bot_id = None;
  }

  pub fn set_bot_profile(&mut self, bot_profile: ::models::ObjsBotProfile) {
    self.bot_profile = Some(bot_profile);
  }

  pub fn with_bot_profile(mut self, bot_profile: ::models::ObjsBotProfile) -> ObjsMessage {
    self.bot_profile = Some(bot_profile);
    self
  }

  pub fn bot_profile(&self) -> Option<&::models::ObjsBotProfile> {
    self.bot_profile.as_ref()
  }

  pub fn reset_bot_profile(&mut self) {
    self.bot_profile = None;
  }

  pub fn set_client_msg_id(&mut self, client_msg_id: String) {
    self.client_msg_id = Some(client_msg_id);
  }

  pub fn with_client_msg_id(mut self, client_msg_id: String) -> ObjsMessage {
    self.client_msg_id = Some(client_msg_id);
    self
  }

  pub fn client_msg_id(&self) -> Option<&String> {
    self.client_msg_id.as_ref()
  }

  pub fn reset_client_msg_id(&mut self) {
    self.client_msg_id = None;
  }

  pub fn set_comment(&mut self, comment: ::models::ObjsComment) {
    self.comment = Some(comment);
  }

  pub fn with_comment(mut self, comment: ::models::ObjsComment) -> ObjsMessage {
    self.comment = Some(comment);
    self
  }

  pub fn comment(&self) -> Option<&::models::ObjsComment> {
    self.comment.as_ref()
  }

  pub fn reset_comment(&mut self) {
    self.comment = None;
  }

  pub fn set_display_as_bot(&mut self, display_as_bot: bool) {
    self.display_as_bot = Some(display_as_bot);
  }

  pub fn with_display_as_bot(mut self, display_as_bot: bool) -> ObjsMessage {
    self.display_as_bot = Some(display_as_bot);
    self
  }

  pub fn display_as_bot(&self) -> Option<&bool> {
    self.display_as_bot.as_ref()
  }

  pub fn reset_display_as_bot(&mut self) {
    self.display_as_bot = None;
  }

  pub fn set_file(&mut self, file: ::models::ObjsFile) {
    self.file = Some(file);
  }

  pub fn with_file(mut self, file: ::models::ObjsFile) -> ObjsMessage {
    self.file = Some(file);
    self
  }

  pub fn file(&self) -> Option<&::models::ObjsFile> {
    self.file.as_ref()
  }

  pub fn reset_file(&mut self) {
    self.file = None;
  }

  pub fn set_files(&mut self, files: Vec<::models::ObjsFile>) {
    self.files = Some(files);
  }

  pub fn with_files(mut self, files: Vec<::models::ObjsFile>) -> ObjsMessage {
    self.files = Some(files);
    self
  }

  pub fn files(&self) -> Option<&Vec<::models::ObjsFile>> {
    self.files.as_ref()
  }

  pub fn reset_files(&mut self) {
    self.files = None;
  }

  pub fn set_icons(&mut self, icons: ::models::ObjsMessageIcons) {
    self.icons = Some(icons);
  }

  pub fn with_icons(mut self, icons: ::models::ObjsMessageIcons) -> ObjsMessage {
    self.icons = Some(icons);
    self
  }

  pub fn icons(&self) -> Option<&::models::ObjsMessageIcons> {
    self.icons.as_ref()
  }

  pub fn reset_icons(&mut self) {
    self.icons = None;
  }

  pub fn set_inviter(&mut self, inviter: ::models::DefsUserId) {
    self.inviter = Some(inviter);
  }

  pub fn with_inviter(mut self, inviter: ::models::DefsUserId) -> ObjsMessage {
    self.inviter = Some(inviter);
    self
  }

  pub fn inviter(&self) -> Option<&::models::DefsUserId> {
    self.inviter.as_ref()
  }

  pub fn reset_inviter(&mut self) {
    self.inviter = None;
  }

  pub fn set_is_delayed_message(&mut self, is_delayed_message: bool) {
    self.is_delayed_message = Some(is_delayed_message);
  }

  pub fn with_is_delayed_message(mut self, is_delayed_message: bool) -> ObjsMessage {
    self.is_delayed_message = Some(is_delayed_message);
    self
  }

  pub fn is_delayed_message(&self) -> Option<&bool> {
    self.is_delayed_message.as_ref()
  }

  pub fn reset_is_delayed_message(&mut self) {
    self.is_delayed_message = None;
  }

  pub fn set_is_intro(&mut self, is_intro: bool) {
    self.is_intro = Some(is_intro);
  }

  pub fn with_is_intro(mut self, is_intro: bool) -> ObjsMessage {
    self.is_intro = Some(is_intro);
    self
  }

  pub fn is_intro(&self) -> Option<&bool> {
    self.is_intro.as_ref()
  }

  pub fn reset_is_intro(&mut self) {
    self.is_intro = None;
  }

  pub fn set_is_starred(&mut self, is_starred: bool) {
    self.is_starred = Some(is_starred);
  }

  pub fn with_is_starred(mut self, is_starred: bool) -> ObjsMessage {
    self.is_starred = Some(is_starred);
    self
  }

  pub fn is_starred(&self) -> Option<&bool> {
    self.is_starred.as_ref()
  }

  pub fn reset_is_starred(&mut self) {
    self.is_starred = None;
  }

  pub fn set_last_read(&mut self, last_read: ::models::DefsTs) {
    self.last_read = Some(last_read);
  }

  pub fn with_last_read(mut self, last_read: ::models::DefsTs) -> ObjsMessage {
    self.last_read = Some(last_read);
    self
  }

  pub fn last_read(&self) -> Option<&::models::DefsTs> {
    self.last_read.as_ref()
  }

  pub fn reset_last_read(&mut self) {
    self.last_read = None;
  }

  pub fn set_latest_reply(&mut self, latest_reply: ::models::DefsTs) {
    self.latest_reply = Some(latest_reply);
  }

  pub fn with_latest_reply(mut self, latest_reply: ::models::DefsTs) -> ObjsMessage {
    self.latest_reply = Some(latest_reply);
    self
  }

  pub fn latest_reply(&self) -> Option<&::models::DefsTs> {
    self.latest_reply.as_ref()
  }

  pub fn reset_latest_reply(&mut self) {
    self.latest_reply = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ObjsMessage {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_old_name(&mut self, old_name: String) {
    self.old_name = Some(old_name);
  }

  pub fn with_old_name(mut self, old_name: String) -> ObjsMessage {
    self.old_name = Some(old_name);
    self
  }

  pub fn old_name(&self) -> Option<&String> {
    self.old_name.as_ref()
  }

  pub fn reset_old_name(&mut self) {
    self.old_name = None;
  }

  pub fn set_parent_user_id(&mut self, parent_user_id: ::models::DefsUserId) {
    self.parent_user_id = Some(parent_user_id);
  }

  pub fn with_parent_user_id(mut self, parent_user_id: ::models::DefsUserId) -> ObjsMessage {
    self.parent_user_id = Some(parent_user_id);
    self
  }

  pub fn parent_user_id(&self) -> Option<&::models::DefsUserId> {
    self.parent_user_id.as_ref()
  }

  pub fn reset_parent_user_id(&mut self) {
    self.parent_user_id = None;
  }

  pub fn set_permalink(&mut self, permalink: String) {
    self.permalink = Some(permalink);
  }

  pub fn with_permalink(mut self, permalink: String) -> ObjsMessage {
    self.permalink = Some(permalink);
    self
  }

  pub fn permalink(&self) -> Option<&String> {
    self.permalink.as_ref()
  }

  pub fn reset_permalink(&mut self) {
    self.permalink = None;
  }

  pub fn set_pinned_to(&mut self, pinned_to: Vec<::models::DefsChannel>) {
    self.pinned_to = Some(pinned_to);
  }

  pub fn with_pinned_to(mut self, pinned_to: Vec<::models::DefsChannel>) -> ObjsMessage {
    self.pinned_to = Some(pinned_to);
    self
  }

  pub fn pinned_to(&self) -> Option<&Vec<::models::DefsChannel>> {
    self.pinned_to.as_ref()
  }

  pub fn reset_pinned_to(&mut self) {
    self.pinned_to = None;
  }

  pub fn set_purpose(&mut self, purpose: String) {
    self.purpose = Some(purpose);
  }

  pub fn with_purpose(mut self, purpose: String) -> ObjsMessage {
    self.purpose = Some(purpose);
    self
  }

  pub fn purpose(&self) -> Option<&String> {
    self.purpose.as_ref()
  }

  pub fn reset_purpose(&mut self) {
    self.purpose = None;
  }

  pub fn set_reactions(&mut self, reactions: Vec<::models::ObjsReaction>) {
    self.reactions = Some(reactions);
  }

  pub fn with_reactions(mut self, reactions: Vec<::models::ObjsReaction>) -> ObjsMessage {
    self.reactions = Some(reactions);
    self
  }

  pub fn reactions(&self) -> Option<&Vec<::models::ObjsReaction>> {
    self.reactions.as_ref()
  }

  pub fn reset_reactions(&mut self) {
    self.reactions = None;
  }

  pub fn set_replies(&mut self, replies: Vec<::models::ObjsMessageReplies>) {
    self.replies = Some(replies);
  }

  pub fn with_replies(mut self, replies: Vec<::models::ObjsMessageReplies>) -> ObjsMessage {
    self.replies = Some(replies);
    self
  }

  pub fn replies(&self) -> Option<&Vec<::models::ObjsMessageReplies>> {
    self.replies.as_ref()
  }

  pub fn reset_replies(&mut self) {
    self.replies = None;
  }

  pub fn set_reply_count(&mut self, reply_count: i32) {
    self.reply_count = Some(reply_count);
  }

  pub fn with_reply_count(mut self, reply_count: i32) -> ObjsMessage {
    self.reply_count = Some(reply_count);
    self
  }

  pub fn reply_count(&self) -> Option<&i32> {
    self.reply_count.as_ref()
  }

  pub fn reset_reply_count(&mut self) {
    self.reply_count = None;
  }

  pub fn set_reply_users(&mut self, reply_users: Vec<::models::DefsUserId>) {
    self.reply_users = Some(reply_users);
  }

  pub fn with_reply_users(mut self, reply_users: Vec<::models::DefsUserId>) -> ObjsMessage {
    self.reply_users = Some(reply_users);
    self
  }

  pub fn reply_users(&self) -> Option<&Vec<::models::DefsUserId>> {
    self.reply_users.as_ref()
  }

  pub fn reset_reply_users(&mut self) {
    self.reply_users = None;
  }

  pub fn set_reply_users_count(&mut self, reply_users_count: i32) {
    self.reply_users_count = Some(reply_users_count);
  }

  pub fn with_reply_users_count(mut self, reply_users_count: i32) -> ObjsMessage {
    self.reply_users_count = Some(reply_users_count);
    self
  }

  pub fn reply_users_count(&self) -> Option<&i32> {
    self.reply_users_count.as_ref()
  }

  pub fn reset_reply_users_count(&mut self) {
    self.reply_users_count = None;
  }

  pub fn set_source_team(&mut self, source_team: ::models::DefsWorkspaceId) {
    self.source_team = Some(source_team);
  }

  pub fn with_source_team(mut self, source_team: ::models::DefsWorkspaceId) -> ObjsMessage {
    self.source_team = Some(source_team);
    self
  }

  pub fn source_team(&self) -> Option<&::models::DefsWorkspaceId> {
    self.source_team.as_ref()
  }

  pub fn reset_source_team(&mut self) {
    self.source_team = None;
  }

  pub fn set_subscribed(&mut self, subscribed: bool) {
    self.subscribed = Some(subscribed);
  }

  pub fn with_subscribed(mut self, subscribed: bool) -> ObjsMessage {
    self.subscribed = Some(subscribed);
    self
  }

  pub fn subscribed(&self) -> Option<&bool> {
    self.subscribed.as_ref()
  }

  pub fn reset_subscribed(&mut self) {
    self.subscribed = None;
  }

  pub fn set_subtype(&mut self, subtype: String) {
    self.subtype = Some(subtype);
  }

  pub fn with_subtype(mut self, subtype: String) -> ObjsMessage {
    self.subtype = Some(subtype);
    self
  }

  pub fn subtype(&self) -> Option<&String> {
    self.subtype.as_ref()
  }

  pub fn reset_subtype(&mut self) {
    self.subtype = None;
  }

  pub fn set_team(&mut self, team: ::models::DefsWorkspaceId) {
    self.team = Some(team);
  }

  pub fn with_team(mut self, team: ::models::DefsWorkspaceId) -> ObjsMessage {
    self.team = Some(team);
    self
  }

  pub fn team(&self) -> Option<&::models::DefsWorkspaceId> {
    self.team.as_ref()
  }

  pub fn reset_team(&mut self) {
    self.team = None;
  }

  pub fn set_text(&mut self, text: String) {
    self.text = text;
  }

  pub fn with_text(mut self, text: String) -> ObjsMessage {
    self.text = text;
    self
  }

  pub fn text(&self) -> &String {
    &self.text
  }


  pub fn set_thread_ts(&mut self, thread_ts: ::models::DefsTs) {
    self.thread_ts = Some(thread_ts);
  }

  pub fn with_thread_ts(mut self, thread_ts: ::models::DefsTs) -> ObjsMessage {
    self.thread_ts = Some(thread_ts);
    self
  }

  pub fn thread_ts(&self) -> Option<&::models::DefsTs> {
    self.thread_ts.as_ref()
  }

  pub fn reset_thread_ts(&mut self) {
    self.thread_ts = None;
  }

  pub fn set_topic(&mut self, topic: String) {
    self.topic = Some(topic);
  }

  pub fn with_topic(mut self, topic: String) -> ObjsMessage {
    self.topic = Some(topic);
    self
  }

  pub fn topic(&self) -> Option<&String> {
    self.topic.as_ref()
  }

  pub fn reset_topic(&mut self) {
    self.topic = None;
  }

  pub fn set_ts(&mut self, ts: ::models::DefsTs) {
    self.ts = ts;
  }

  pub fn with_ts(mut self, ts: ::models::DefsTs) -> ObjsMessage {
    self.ts = ts;
    self
  }

  pub fn ts(&self) -> &::models::DefsTs {
    &self.ts
  }


  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> ObjsMessage {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


  pub fn set_unread_count(&mut self, unread_count: i32) {
    self.unread_count = Some(unread_count);
  }

  pub fn with_unread_count(mut self, unread_count: i32) -> ObjsMessage {
    self.unread_count = Some(unread_count);
    self
  }

  pub fn unread_count(&self) -> Option<&i32> {
    self.unread_count.as_ref()
  }

  pub fn reset_unread_count(&mut self) {
    self.unread_count = None;
  }

  pub fn set_upload(&mut self, upload: bool) {
    self.upload = Some(upload);
  }

  pub fn with_upload(mut self, upload: bool) -> ObjsMessage {
    self.upload = Some(upload);
    self
  }

  pub fn upload(&self) -> Option<&bool> {
    self.upload.as_ref()
  }

  pub fn reset_upload(&mut self) {
    self.upload = None;
  }

  pub fn set_user(&mut self, user: ::models::DefsUserId) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: ::models::DefsUserId) -> ObjsMessage {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&::models::DefsUserId> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

  pub fn set_user_profile(&mut self, user_profile: ::models::ObjsUserProfileShort) {
    self.user_profile = Some(user_profile);
  }

  pub fn with_user_profile(mut self, user_profile: ::models::ObjsUserProfileShort) -> ObjsMessage {
    self.user_profile = Some(user_profile);
    self
  }

  pub fn user_profile(&self) -> Option<&::models::ObjsUserProfileShort> {
    self.user_profile.as_ref()
  }

  pub fn reset_user_profile(&mut self) {
    self.user_profile = None;
  }

  pub fn set_user_team(&mut self, user_team: ::models::DefsWorkspaceId) {
    self.user_team = Some(user_team);
  }

  pub fn with_user_team(mut self, user_team: ::models::DefsWorkspaceId) -> ObjsMessage {
    self.user_team = Some(user_team);
    self
  }

  pub fn user_team(&self) -> Option<&::models::DefsWorkspaceId> {
    self.user_team.as_ref()
  }

  pub fn reset_user_team(&mut self) {
    self.user_team = None;
  }

  pub fn set_username(&mut self, username: String) {
    self.username = Some(username);
  }

  pub fn with_username(mut self, username: String) -> ObjsMessage {
    self.username = Some(username);
    self
  }

  pub fn username(&self) -> Option<&String> {
    self.username.as_ref()
  }

  pub fn reset_username(&mut self) {
    self.username = None;
  }

}



