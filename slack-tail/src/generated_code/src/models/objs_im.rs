/* 
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * OpenAPI spec version: 1.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ObjsIm {
  #[serde(rename = "created")]
  created: i32,
  #[serde(rename = "id")]
  id: ::models::DefsDmId,
  #[serde(rename = "is_app_home")]
  is_app_home: Option<bool>,
  #[serde(rename = "is_archived")]
  is_archived: Option<bool>,
  #[serde(rename = "is_ext_shared")]
  is_ext_shared: Option<bool>,
  #[serde(rename = "is_frozen")]
  is_frozen: Option<bool>,
  #[serde(rename = "is_im")]
  is_im: bool,
  #[serde(rename = "is_org_shared")]
  is_org_shared: bool,
  #[serde(rename = "is_shared")]
  is_shared: Option<bool>,
  #[serde(rename = "is_user_deleted")]
  is_user_deleted: bool,
  #[serde(rename = "priority")]
  priority: Option<f32>,
  #[serde(rename = "user")]
  user: ::models::DefsUserId
}

impl ObjsIm {
  pub fn new(created: i32, id: ::models::DefsDmId, is_im: bool, is_org_shared: bool, is_user_deleted: bool, user: ::models::DefsUserId) -> ObjsIm {
    ObjsIm {
      created: created,
      id: id,
      is_app_home: None,
      is_archived: None,
      is_ext_shared: None,
      is_frozen: None,
      is_im: is_im,
      is_org_shared: is_org_shared,
      is_shared: None,
      is_user_deleted: is_user_deleted,
      priority: None,
      user: user
    }
  }

  pub fn set_created(&mut self, created: i32) {
    self.created = created;
  }

  pub fn with_created(mut self, created: i32) -> ObjsIm {
    self.created = created;
    self
  }

  pub fn created(&self) -> &i32 {
    &self.created
  }


  pub fn set_id(&mut self, id: ::models::DefsDmId) {
    self.id = id;
  }

  pub fn with_id(mut self, id: ::models::DefsDmId) -> ObjsIm {
    self.id = id;
    self
  }

  pub fn id(&self) -> &::models::DefsDmId {
    &self.id
  }


  pub fn set_is_app_home(&mut self, is_app_home: bool) {
    self.is_app_home = Some(is_app_home);
  }

  pub fn with_is_app_home(mut self, is_app_home: bool) -> ObjsIm {
    self.is_app_home = Some(is_app_home);
    self
  }

  pub fn is_app_home(&self) -> Option<&bool> {
    self.is_app_home.as_ref()
  }

  pub fn reset_is_app_home(&mut self) {
    self.is_app_home = None;
  }

  pub fn set_is_archived(&mut self, is_archived: bool) {
    self.is_archived = Some(is_archived);
  }

  pub fn with_is_archived(mut self, is_archived: bool) -> ObjsIm {
    self.is_archived = Some(is_archived);
    self
  }

  pub fn is_archived(&self) -> Option<&bool> {
    self.is_archived.as_ref()
  }

  pub fn reset_is_archived(&mut self) {
    self.is_archived = None;
  }

  pub fn set_is_ext_shared(&mut self, is_ext_shared: bool) {
    self.is_ext_shared = Some(is_ext_shared);
  }

  pub fn with_is_ext_shared(mut self, is_ext_shared: bool) -> ObjsIm {
    self.is_ext_shared = Some(is_ext_shared);
    self
  }

  pub fn is_ext_shared(&self) -> Option<&bool> {
    self.is_ext_shared.as_ref()
  }

  pub fn reset_is_ext_shared(&mut self) {
    self.is_ext_shared = None;
  }

  pub fn set_is_frozen(&mut self, is_frozen: bool) {
    self.is_frozen = Some(is_frozen);
  }

  pub fn with_is_frozen(mut self, is_frozen: bool) -> ObjsIm {
    self.is_frozen = Some(is_frozen);
    self
  }

  pub fn is_frozen(&self) -> Option<&bool> {
    self.is_frozen.as_ref()
  }

  pub fn reset_is_frozen(&mut self) {
    self.is_frozen = None;
  }

  pub fn set_is_im(&mut self, is_im: bool) {
    self.is_im = is_im;
  }

  pub fn with_is_im(mut self, is_im: bool) -> ObjsIm {
    self.is_im = is_im;
    self
  }

  pub fn is_im(&self) -> &bool {
    &self.is_im
  }


  pub fn set_is_org_shared(&mut self, is_org_shared: bool) {
    self.is_org_shared = is_org_shared;
  }

  pub fn with_is_org_shared(mut self, is_org_shared: bool) -> ObjsIm {
    self.is_org_shared = is_org_shared;
    self
  }

  pub fn is_org_shared(&self) -> &bool {
    &self.is_org_shared
  }


  pub fn set_is_shared(&mut self, is_shared: bool) {
    self.is_shared = Some(is_shared);
  }

  pub fn with_is_shared(mut self, is_shared: bool) -> ObjsIm {
    self.is_shared = Some(is_shared);
    self
  }

  pub fn is_shared(&self) -> Option<&bool> {
    self.is_shared.as_ref()
  }

  pub fn reset_is_shared(&mut self) {
    self.is_shared = None;
  }

  pub fn set_is_user_deleted(&mut self, is_user_deleted: bool) {
    self.is_user_deleted = is_user_deleted;
  }

  pub fn with_is_user_deleted(mut self, is_user_deleted: bool) -> ObjsIm {
    self.is_user_deleted = is_user_deleted;
    self
  }

  pub fn is_user_deleted(&self) -> &bool {
    &self.is_user_deleted
  }


  pub fn set_priority(&mut self, priority: f32) {
    self.priority = Some(priority);
  }

  pub fn with_priority(mut self, priority: f32) -> ObjsIm {
    self.priority = Some(priority);
    self
  }

  pub fn priority(&self) -> Option<&f32> {
    self.priority.as_ref()
  }

  pub fn reset_priority(&mut self) {
    self.priority = None;
  }

  pub fn set_user(&mut self, user: ::models::DefsUserId) {
    self.user = user;
  }

  pub fn with_user(mut self, user: ::models::DefsUserId) -> ObjsIm {
    self.user = user;
    self
  }

  pub fn user(&self) -> &::models::DefsUserId {
    &self.user
  }


}



