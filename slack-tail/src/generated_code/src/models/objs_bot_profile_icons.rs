/* 
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * OpenAPI spec version: 1.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ObjsBotProfileIcons {
  #[serde(rename = "image_36")]
  image_36: String,
  #[serde(rename = "image_48")]
  image_48: String,
  #[serde(rename = "image_72")]
  image_72: String
}

impl ObjsBotProfileIcons {
  pub fn new(image_36: String, image_48: String, image_72: String) -> ObjsBotProfileIcons {
    ObjsBotProfileIcons {
      image_36: image_36,
      image_48: image_48,
      image_72: image_72
    }
  }

  pub fn set_image_36(&mut self, image_36: String) {
    self.image_36 = image_36;
  }

  pub fn with_image_36(mut self, image_36: String) -> ObjsBotProfileIcons {
    self.image_36 = image_36;
    self
  }

  pub fn image_36(&self) -> &String {
    &self.image_36
  }


  pub fn set_image_48(&mut self, image_48: String) {
    self.image_48 = image_48;
  }

  pub fn with_image_48(mut self, image_48: String) -> ObjsBotProfileIcons {
    self.image_48 = image_48;
    self
  }

  pub fn image_48(&self) -> &String {
    &self.image_48
  }


  pub fn set_image_72(&mut self, image_72: String) {
    self.image_72 = image_72;
  }

  pub fn with_image_72(mut self, image_72: String) -> ObjsBotProfileIcons {
    self.image_72 = image_72;
    self
  }

  pub fn image_72(&self) -> &String {
    &self.image_72
  }


}



