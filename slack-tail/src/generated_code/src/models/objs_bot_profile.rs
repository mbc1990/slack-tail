/* 
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * OpenAPI spec version: 1.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ObjsBotProfile {
  #[serde(rename = "app_id")]
  app_id: ::models::DefsAppId,
  #[serde(rename = "deleted")]
  deleted: bool,
  #[serde(rename = "icons")]
  icons: ::models::ObjsBotProfileIcons,
  #[serde(rename = "id")]
  id: ::models::DefsBotId,
  #[serde(rename = "name")]
  name: String,
  #[serde(rename = "team_id")]
  team_id: ::models::DefsTeam,
  #[serde(rename = "updated")]
  updated: i32
}

impl ObjsBotProfile {
  pub fn new(app_id: ::models::DefsAppId, deleted: bool, icons: ::models::ObjsBotProfileIcons, id: ::models::DefsBotId, name: String, team_id: ::models::DefsTeam, updated: i32) -> ObjsBotProfile {
    ObjsBotProfile {
      app_id: app_id,
      deleted: deleted,
      icons: icons,
      id: id,
      name: name,
      team_id: team_id,
      updated: updated
    }
  }

  pub fn set_app_id(&mut self, app_id: ::models::DefsAppId) {
    self.app_id = app_id;
  }

  pub fn with_app_id(mut self, app_id: ::models::DefsAppId) -> ObjsBotProfile {
    self.app_id = app_id;
    self
  }

  pub fn app_id(&self) -> &::models::DefsAppId {
    &self.app_id
  }


  pub fn set_deleted(&mut self, deleted: bool) {
    self.deleted = deleted;
  }

  pub fn with_deleted(mut self, deleted: bool) -> ObjsBotProfile {
    self.deleted = deleted;
    self
  }

  pub fn deleted(&self) -> &bool {
    &self.deleted
  }


  pub fn set_icons(&mut self, icons: ::models::ObjsBotProfileIcons) {
    self.icons = icons;
  }

  pub fn with_icons(mut self, icons: ::models::ObjsBotProfileIcons) -> ObjsBotProfile {
    self.icons = icons;
    self
  }

  pub fn icons(&self) -> &::models::ObjsBotProfileIcons {
    &self.icons
  }


  pub fn set_id(&mut self, id: ::models::DefsBotId) {
    self.id = id;
  }

  pub fn with_id(mut self, id: ::models::DefsBotId) -> ObjsBotProfile {
    self.id = id;
    self
  }

  pub fn id(&self) -> &::models::DefsBotId {
    &self.id
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> ObjsBotProfile {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_team_id(&mut self, team_id: ::models::DefsTeam) {
    self.team_id = team_id;
  }

  pub fn with_team_id(mut self, team_id: ::models::DefsTeam) -> ObjsBotProfile {
    self.team_id = team_id;
    self
  }

  pub fn team_id(&self) -> &::models::DefsTeam {
    &self.team_id
  }


  pub fn set_updated(&mut self, updated: i32) {
    self.updated = updated;
  }

  pub fn with_updated(mut self, updated: i32) -> ObjsBotProfile {
    self.updated = updated;
    self
  }

  pub fn updated(&self) -> &i32 {
    &self.updated
  }


}



