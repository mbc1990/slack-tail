/* 
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * OpenAPI spec version: 1.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ObjsReaction {
  #[serde(rename = "count")]
  count: i32,
  #[serde(rename = "name")]
  name: String,
  #[serde(rename = "users")]
  users: Vec<::models::DefsUserId>
}

impl ObjsReaction {
  pub fn new(count: i32, name: String, users: Vec<::models::DefsUserId>) -> ObjsReaction {
    ObjsReaction {
      count: count,
      name: name,
      users: users
    }
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = count;
  }

  pub fn with_count(mut self, count: i32) -> ObjsReaction {
    self.count = count;
    self
  }

  pub fn count(&self) -> &i32 {
    &self.count
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> ObjsReaction {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_users(&mut self, users: Vec<::models::DefsUserId>) {
    self.users = users;
  }

  pub fn with_users(mut self, users: Vec<::models::DefsUserId>) -> ObjsReaction {
    self.users = users;
    self
  }

  pub fn users(&self) -> &Vec<::models::DefsUserId> {
    &self.users
  }


}



