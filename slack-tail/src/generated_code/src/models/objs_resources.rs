/* 
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * OpenAPI spec version: 1.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ObjsResources {
  #[serde(rename = "excluded_ids")]
  excluded_ids: Option<Vec<Value>>,
  #[serde(rename = "ids")]
  ids: Vec<Value>,
  #[serde(rename = "wildcard")]
  wildcard: Option<bool>
}

impl ObjsResources {
  pub fn new(ids: Vec<Value>) -> ObjsResources {
    ObjsResources {
      excluded_ids: None,
      ids: ids,
      wildcard: None
    }
  }

  pub fn set_excluded_ids(&mut self, excluded_ids: Vec<Value>) {
    self.excluded_ids = Some(excluded_ids);
  }

  pub fn with_excluded_ids(mut self, excluded_ids: Vec<Value>) -> ObjsResources {
    self.excluded_ids = Some(excluded_ids);
    self
  }

  pub fn excluded_ids(&self) -> Option<&Vec<Value>> {
    self.excluded_ids.as_ref()
  }

  pub fn reset_excluded_ids(&mut self) {
    self.excluded_ids = None;
  }

  pub fn set_ids(&mut self, ids: Vec<Value>) {
    self.ids = ids;
  }

  pub fn with_ids(mut self, ids: Vec<Value>) -> ObjsResources {
    self.ids = ids;
    self
  }

  pub fn ids(&self) -> &Vec<Value> {
    &self.ids
  }


  pub fn set_wildcard(&mut self, wildcard: bool) {
    self.wildcard = Some(wildcard);
  }

  pub fn with_wildcard(mut self, wildcard: bool) -> ObjsResources {
    self.wildcard = Some(wildcard);
    self
  }

  pub fn wildcard(&self) -> Option<&bool> {
    self.wildcard.as_ref()
  }

  pub fn reset_wildcard(&mut self) {
    self.wildcard = None;
  }

}



