/* 
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * OpenAPI spec version: 1.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ObjsSubteam {
  #[serde(rename = "auto_provision")]
  auto_provision: bool,
  #[serde(rename = "auto_type")]
  auto_type: Value,
  #[serde(rename = "created_by")]
  created_by: ::models::DefsUserId,
  #[serde(rename = "date_create")]
  date_create: i32,
  #[serde(rename = "date_delete")]
  date_delete: i32,
  #[serde(rename = "date_update")]
  date_update: i32,
  #[serde(rename = "deleted_by")]
  deleted_by: Value,
  #[serde(rename = "description")]
  description: String,
  #[serde(rename = "enterprise_subteam_id")]
  enterprise_subteam_id: String,
  #[serde(rename = "handle")]
  handle: String,
  #[serde(rename = "id")]
  id: ::models::DefsSubteamId,
  #[serde(rename = "is_external")]
  is_external: bool,
  #[serde(rename = "is_subteam")]
  is_subteam: bool,
  #[serde(rename = "is_usergroup")]
  is_usergroup: bool,
  #[serde(rename = "name")]
  name: String,
  #[serde(rename = "prefs")]
  prefs: ::models::ObjsSubteamPrefs,
  #[serde(rename = "team_id")]
  team_id: ::models::DefsTeam,
  #[serde(rename = "updated_by")]
  updated_by: ::models::DefsUserId,
  #[serde(rename = "user_count")]
  user_count: Option<i32>,
  #[serde(rename = "users")]
  users: Option<Vec<::models::DefsUserId>>
}

impl ObjsSubteam {
  pub fn new(auto_provision: bool, auto_type: Value, created_by: ::models::DefsUserId, date_create: i32, date_delete: i32, date_update: i32, deleted_by: Value, description: String, enterprise_subteam_id: String, handle: String, id: ::models::DefsSubteamId, is_external: bool, is_subteam: bool, is_usergroup: bool, name: String, prefs: ::models::ObjsSubteamPrefs, team_id: ::models::DefsTeam, updated_by: ::models::DefsUserId) -> ObjsSubteam {
    ObjsSubteam {
      auto_provision: auto_provision,
      auto_type: auto_type,
      created_by: created_by,
      date_create: date_create,
      date_delete: date_delete,
      date_update: date_update,
      deleted_by: deleted_by,
      description: description,
      enterprise_subteam_id: enterprise_subteam_id,
      handle: handle,
      id: id,
      is_external: is_external,
      is_subteam: is_subteam,
      is_usergroup: is_usergroup,
      name: name,
      prefs: prefs,
      team_id: team_id,
      updated_by: updated_by,
      user_count: None,
      users: None
    }
  }

  pub fn set_auto_provision(&mut self, auto_provision: bool) {
    self.auto_provision = auto_provision;
  }

  pub fn with_auto_provision(mut self, auto_provision: bool) -> ObjsSubteam {
    self.auto_provision = auto_provision;
    self
  }

  pub fn auto_provision(&self) -> &bool {
    &self.auto_provision
  }


  pub fn set_auto_type(&mut self, auto_type: Value) {
    self.auto_type = auto_type;
  }

  pub fn with_auto_type(mut self, auto_type: Value) -> ObjsSubteam {
    self.auto_type = auto_type;
    self
  }

  pub fn auto_type(&self) -> &Value {
    &self.auto_type
  }


  pub fn set_created_by(&mut self, created_by: ::models::DefsUserId) {
    self.created_by = created_by;
  }

  pub fn with_created_by(mut self, created_by: ::models::DefsUserId) -> ObjsSubteam {
    self.created_by = created_by;
    self
  }

  pub fn created_by(&self) -> &::models::DefsUserId {
    &self.created_by
  }


  pub fn set_date_create(&mut self, date_create: i32) {
    self.date_create = date_create;
  }

  pub fn with_date_create(mut self, date_create: i32) -> ObjsSubteam {
    self.date_create = date_create;
    self
  }

  pub fn date_create(&self) -> &i32 {
    &self.date_create
  }


  pub fn set_date_delete(&mut self, date_delete: i32) {
    self.date_delete = date_delete;
  }

  pub fn with_date_delete(mut self, date_delete: i32) -> ObjsSubteam {
    self.date_delete = date_delete;
    self
  }

  pub fn date_delete(&self) -> &i32 {
    &self.date_delete
  }


  pub fn set_date_update(&mut self, date_update: i32) {
    self.date_update = date_update;
  }

  pub fn with_date_update(mut self, date_update: i32) -> ObjsSubteam {
    self.date_update = date_update;
    self
  }

  pub fn date_update(&self) -> &i32 {
    &self.date_update
  }


  pub fn set_deleted_by(&mut self, deleted_by: Value) {
    self.deleted_by = deleted_by;
  }

  pub fn with_deleted_by(mut self, deleted_by: Value) -> ObjsSubteam {
    self.deleted_by = deleted_by;
    self
  }

  pub fn deleted_by(&self) -> &Value {
    &self.deleted_by
  }


  pub fn set_description(&mut self, description: String) {
    self.description = description;
  }

  pub fn with_description(mut self, description: String) -> ObjsSubteam {
    self.description = description;
    self
  }

  pub fn description(&self) -> &String {
    &self.description
  }


  pub fn set_enterprise_subteam_id(&mut self, enterprise_subteam_id: String) {
    self.enterprise_subteam_id = enterprise_subteam_id;
  }

  pub fn with_enterprise_subteam_id(mut self, enterprise_subteam_id: String) -> ObjsSubteam {
    self.enterprise_subteam_id = enterprise_subteam_id;
    self
  }

  pub fn enterprise_subteam_id(&self) -> &String {
    &self.enterprise_subteam_id
  }


  pub fn set_handle(&mut self, handle: String) {
    self.handle = handle;
  }

  pub fn with_handle(mut self, handle: String) -> ObjsSubteam {
    self.handle = handle;
    self
  }

  pub fn handle(&self) -> &String {
    &self.handle
  }


  pub fn set_id(&mut self, id: ::models::DefsSubteamId) {
    self.id = id;
  }

  pub fn with_id(mut self, id: ::models::DefsSubteamId) -> ObjsSubteam {
    self.id = id;
    self
  }

  pub fn id(&self) -> &::models::DefsSubteamId {
    &self.id
  }


  pub fn set_is_external(&mut self, is_external: bool) {
    self.is_external = is_external;
  }

  pub fn with_is_external(mut self, is_external: bool) -> ObjsSubteam {
    self.is_external = is_external;
    self
  }

  pub fn is_external(&self) -> &bool {
    &self.is_external
  }


  pub fn set_is_subteam(&mut self, is_subteam: bool) {
    self.is_subteam = is_subteam;
  }

  pub fn with_is_subteam(mut self, is_subteam: bool) -> ObjsSubteam {
    self.is_subteam = is_subteam;
    self
  }

  pub fn is_subteam(&self) -> &bool {
    &self.is_subteam
  }


  pub fn set_is_usergroup(&mut self, is_usergroup: bool) {
    self.is_usergroup = is_usergroup;
  }

  pub fn with_is_usergroup(mut self, is_usergroup: bool) -> ObjsSubteam {
    self.is_usergroup = is_usergroup;
    self
  }

  pub fn is_usergroup(&self) -> &bool {
    &self.is_usergroup
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> ObjsSubteam {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_prefs(&mut self, prefs: ::models::ObjsSubteamPrefs) {
    self.prefs = prefs;
  }

  pub fn with_prefs(mut self, prefs: ::models::ObjsSubteamPrefs) -> ObjsSubteam {
    self.prefs = prefs;
    self
  }

  pub fn prefs(&self) -> &::models::ObjsSubteamPrefs {
    &self.prefs
  }


  pub fn set_team_id(&mut self, team_id: ::models::DefsTeam) {
    self.team_id = team_id;
  }

  pub fn with_team_id(mut self, team_id: ::models::DefsTeam) -> ObjsSubteam {
    self.team_id = team_id;
    self
  }

  pub fn team_id(&self) -> &::models::DefsTeam {
    &self.team_id
  }


  pub fn set_updated_by(&mut self, updated_by: ::models::DefsUserId) {
    self.updated_by = updated_by;
  }

  pub fn with_updated_by(mut self, updated_by: ::models::DefsUserId) -> ObjsSubteam {
    self.updated_by = updated_by;
    self
  }

  pub fn updated_by(&self) -> &::models::DefsUserId {
    &self.updated_by
  }


  pub fn set_user_count(&mut self, user_count: i32) {
    self.user_count = Some(user_count);
  }

  pub fn with_user_count(mut self, user_count: i32) -> ObjsSubteam {
    self.user_count = Some(user_count);
    self
  }

  pub fn user_count(&self) -> Option<&i32> {
    self.user_count.as_ref()
  }

  pub fn reset_user_count(&mut self) {
    self.user_count = None;
  }

  pub fn set_users(&mut self, users: Vec<::models::DefsUserId>) {
    self.users = Some(users);
  }

  pub fn with_users(mut self, users: Vec<::models::DefsUserId>) -> ObjsSubteam {
    self.users = Some(users);
    self
  }

  pub fn users(&self) -> Option<&Vec<::models::DefsUserId>> {
    self.users.as_ref()
  }

  pub fn reset_users(&mut self) {
    self.users = None;
  }

}



