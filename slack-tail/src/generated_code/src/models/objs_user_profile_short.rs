/* 
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * OpenAPI spec version: 1.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ObjsUserProfileShort {
  #[serde(rename = "avatar_hash")]
  avatar_hash: String,
  #[serde(rename = "display_name")]
  display_name: String,
  #[serde(rename = "display_name_normalized")]
  display_name_normalized: Option<String>,
  #[serde(rename = "first_name")]
  first_name: String,
  #[serde(rename = "image_72")]
  image_72: String,
  #[serde(rename = "is_restricted")]
  is_restricted: bool,
  #[serde(rename = "is_ultra_restricted")]
  is_ultra_restricted: bool,
  #[serde(rename = "name")]
  name: String,
  #[serde(rename = "real_name")]
  real_name: String,
  #[serde(rename = "real_name_normalized")]
  real_name_normalized: Option<String>,
  #[serde(rename = "team")]
  team: ::models::DefsWorkspaceId
}

impl ObjsUserProfileShort {
  pub fn new(avatar_hash: String, display_name: String, first_name: String, image_72: String, is_restricted: bool, is_ultra_restricted: bool, name: String, real_name: String, team: ::models::DefsWorkspaceId) -> ObjsUserProfileShort {
    ObjsUserProfileShort {
      avatar_hash: avatar_hash,
      display_name: display_name,
      display_name_normalized: None,
      first_name: first_name,
      image_72: image_72,
      is_restricted: is_restricted,
      is_ultra_restricted: is_ultra_restricted,
      name: name,
      real_name: real_name,
      real_name_normalized: None,
      team: team
    }
  }

  pub fn set_avatar_hash(&mut self, avatar_hash: String) {
    self.avatar_hash = avatar_hash;
  }

  pub fn with_avatar_hash(mut self, avatar_hash: String) -> ObjsUserProfileShort {
    self.avatar_hash = avatar_hash;
    self
  }

  pub fn avatar_hash(&self) -> &String {
    &self.avatar_hash
  }


  pub fn set_display_name(&mut self, display_name: String) {
    self.display_name = display_name;
  }

  pub fn with_display_name(mut self, display_name: String) -> ObjsUserProfileShort {
    self.display_name = display_name;
    self
  }

  pub fn display_name(&self) -> &String {
    &self.display_name
  }


  pub fn set_display_name_normalized(&mut self, display_name_normalized: String) {
    self.display_name_normalized = Some(display_name_normalized);
  }

  pub fn with_display_name_normalized(mut self, display_name_normalized: String) -> ObjsUserProfileShort {
    self.display_name_normalized = Some(display_name_normalized);
    self
  }

  pub fn display_name_normalized(&self) -> Option<&String> {
    self.display_name_normalized.as_ref()
  }

  pub fn reset_display_name_normalized(&mut self) {
    self.display_name_normalized = None;
  }

  pub fn set_first_name(&mut self, first_name: String) {
    self.first_name = first_name;
  }

  pub fn with_first_name(mut self, first_name: String) -> ObjsUserProfileShort {
    self.first_name = first_name;
    self
  }

  pub fn first_name(&self) -> &String {
    &self.first_name
  }


  pub fn set_image_72(&mut self, image_72: String) {
    self.image_72 = image_72;
  }

  pub fn with_image_72(mut self, image_72: String) -> ObjsUserProfileShort {
    self.image_72 = image_72;
    self
  }

  pub fn image_72(&self) -> &String {
    &self.image_72
  }


  pub fn set_is_restricted(&mut self, is_restricted: bool) {
    self.is_restricted = is_restricted;
  }

  pub fn with_is_restricted(mut self, is_restricted: bool) -> ObjsUserProfileShort {
    self.is_restricted = is_restricted;
    self
  }

  pub fn is_restricted(&self) -> &bool {
    &self.is_restricted
  }


  pub fn set_is_ultra_restricted(&mut self, is_ultra_restricted: bool) {
    self.is_ultra_restricted = is_ultra_restricted;
  }

  pub fn with_is_ultra_restricted(mut self, is_ultra_restricted: bool) -> ObjsUserProfileShort {
    self.is_ultra_restricted = is_ultra_restricted;
    self
  }

  pub fn is_ultra_restricted(&self) -> &bool {
    &self.is_ultra_restricted
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> ObjsUserProfileShort {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_real_name(&mut self, real_name: String) {
    self.real_name = real_name;
  }

  pub fn with_real_name(mut self, real_name: String) -> ObjsUserProfileShort {
    self.real_name = real_name;
    self
  }

  pub fn real_name(&self) -> &String {
    &self.real_name
  }


  pub fn set_real_name_normalized(&mut self, real_name_normalized: String) {
    self.real_name_normalized = Some(real_name_normalized);
  }

  pub fn with_real_name_normalized(mut self, real_name_normalized: String) -> ObjsUserProfileShort {
    self.real_name_normalized = Some(real_name_normalized);
    self
  }

  pub fn real_name_normalized(&self) -> Option<&String> {
    self.real_name_normalized.as_ref()
  }

  pub fn reset_real_name_normalized(&mut self) {
    self.real_name_normalized = None;
  }

  pub fn set_team(&mut self, team: ::models::DefsWorkspaceId) {
    self.team = team;
  }

  pub fn with_team(mut self, team: ::models::DefsWorkspaceId) -> ObjsUserProfileShort {
    self.team = team;
    self
  }

  pub fn team(&self) -> &::models::DefsWorkspaceId {
    &self.team
  }


}



