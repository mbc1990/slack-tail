/* 
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * OpenAPI spec version: 1.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ObjsIcon {
  #[serde(rename = "image_102")]
  image_102: Option<String>,
  #[serde(rename = "image_132")]
  image_132: Option<String>,
  #[serde(rename = "image_230")]
  image_230: Option<String>,
  #[serde(rename = "image_34")]
  image_34: Option<String>,
  #[serde(rename = "image_44")]
  image_44: Option<String>,
  #[serde(rename = "image_68")]
  image_68: Option<String>,
  #[serde(rename = "image_88")]
  image_88: Option<String>,
  #[serde(rename = "image_default")]
  image_default: Option<bool>
}

impl ObjsIcon {
  pub fn new() -> ObjsIcon {
    ObjsIcon {
      image_102: None,
      image_132: None,
      image_230: None,
      image_34: None,
      image_44: None,
      image_68: None,
      image_88: None,
      image_default: None
    }
  }

  pub fn set_image_102(&mut self, image_102: String) {
    self.image_102 = Some(image_102);
  }

  pub fn with_image_102(mut self, image_102: String) -> ObjsIcon {
    self.image_102 = Some(image_102);
    self
  }

  pub fn image_102(&self) -> Option<&String> {
    self.image_102.as_ref()
  }

  pub fn reset_image_102(&mut self) {
    self.image_102 = None;
  }

  pub fn set_image_132(&mut self, image_132: String) {
    self.image_132 = Some(image_132);
  }

  pub fn with_image_132(mut self, image_132: String) -> ObjsIcon {
    self.image_132 = Some(image_132);
    self
  }

  pub fn image_132(&self) -> Option<&String> {
    self.image_132.as_ref()
  }

  pub fn reset_image_132(&mut self) {
    self.image_132 = None;
  }

  pub fn set_image_230(&mut self, image_230: String) {
    self.image_230 = Some(image_230);
  }

  pub fn with_image_230(mut self, image_230: String) -> ObjsIcon {
    self.image_230 = Some(image_230);
    self
  }

  pub fn image_230(&self) -> Option<&String> {
    self.image_230.as_ref()
  }

  pub fn reset_image_230(&mut self) {
    self.image_230 = None;
  }

  pub fn set_image_34(&mut self, image_34: String) {
    self.image_34 = Some(image_34);
  }

  pub fn with_image_34(mut self, image_34: String) -> ObjsIcon {
    self.image_34 = Some(image_34);
    self
  }

  pub fn image_34(&self) -> Option<&String> {
    self.image_34.as_ref()
  }

  pub fn reset_image_34(&mut self) {
    self.image_34 = None;
  }

  pub fn set_image_44(&mut self, image_44: String) {
    self.image_44 = Some(image_44);
  }

  pub fn with_image_44(mut self, image_44: String) -> ObjsIcon {
    self.image_44 = Some(image_44);
    self
  }

  pub fn image_44(&self) -> Option<&String> {
    self.image_44.as_ref()
  }

  pub fn reset_image_44(&mut self) {
    self.image_44 = None;
  }

  pub fn set_image_68(&mut self, image_68: String) {
    self.image_68 = Some(image_68);
  }

  pub fn with_image_68(mut self, image_68: String) -> ObjsIcon {
    self.image_68 = Some(image_68);
    self
  }

  pub fn image_68(&self) -> Option<&String> {
    self.image_68.as_ref()
  }

  pub fn reset_image_68(&mut self) {
    self.image_68 = None;
  }

  pub fn set_image_88(&mut self, image_88: String) {
    self.image_88 = Some(image_88);
  }

  pub fn with_image_88(mut self, image_88: String) -> ObjsIcon {
    self.image_88 = Some(image_88);
    self
  }

  pub fn image_88(&self) -> Option<&String> {
    self.image_88.as_ref()
  }

  pub fn reset_image_88(&mut self) {
    self.image_88 = None;
  }

  pub fn set_image_default(&mut self, image_default: bool) {
    self.image_default = Some(image_default);
  }

  pub fn with_image_default(mut self, image_default: bool) -> ObjsIcon {
    self.image_default = Some(image_default);
    self
  }

  pub fn image_default(&self) -> Option<&bool> {
    self.image_default.as_ref()
  }

  pub fn reset_image_default(&mut self) {
    self.image_default = None;
  }

}



