/* 
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * OpenAPI spec version: 1.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ObjsTeamProfileField {
  #[serde(rename = "field_name")]
  field_name: Option<String>,
  #[serde(rename = "hint")]
  hint: String,
  #[serde(rename = "id")]
  id: String,
  #[serde(rename = "is_hidden")]
  is_hidden: Option<bool>,
  #[serde(rename = "label")]
  label: String,
  #[serde(rename = "options")]
  options: Vec<String>,
  #[serde(rename = "ordering")]
  ordering: f32,
  #[serde(rename = "possible_values")]
  possible_values: Option<Vec<String>>,
  #[serde(rename = "type")]
  _type: String
}

impl ObjsTeamProfileField {
  pub fn new(hint: String, id: String, label: String, options: Vec<String>, ordering: f32, _type: String) -> ObjsTeamProfileField {
    ObjsTeamProfileField {
      field_name: None,
      hint: hint,
      id: id,
      is_hidden: None,
      label: label,
      options: options,
      ordering: ordering,
      possible_values: None,
      _type: _type
    }
  }

  pub fn set_field_name(&mut self, field_name: String) {
    self.field_name = Some(field_name);
  }

  pub fn with_field_name(mut self, field_name: String) -> ObjsTeamProfileField {
    self.field_name = Some(field_name);
    self
  }

  pub fn field_name(&self) -> Option<&String> {
    self.field_name.as_ref()
  }

  pub fn reset_field_name(&mut self) {
    self.field_name = None;
  }

  pub fn set_hint(&mut self, hint: String) {
    self.hint = hint;
  }

  pub fn with_hint(mut self, hint: String) -> ObjsTeamProfileField {
    self.hint = hint;
    self
  }

  pub fn hint(&self) -> &String {
    &self.hint
  }


  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> ObjsTeamProfileField {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_is_hidden(&mut self, is_hidden: bool) {
    self.is_hidden = Some(is_hidden);
  }

  pub fn with_is_hidden(mut self, is_hidden: bool) -> ObjsTeamProfileField {
    self.is_hidden = Some(is_hidden);
    self
  }

  pub fn is_hidden(&self) -> Option<&bool> {
    self.is_hidden.as_ref()
  }

  pub fn reset_is_hidden(&mut self) {
    self.is_hidden = None;
  }

  pub fn set_label(&mut self, label: String) {
    self.label = label;
  }

  pub fn with_label(mut self, label: String) -> ObjsTeamProfileField {
    self.label = label;
    self
  }

  pub fn label(&self) -> &String {
    &self.label
  }


  pub fn set_options(&mut self, options: Vec<String>) {
    self.options = options;
  }

  pub fn with_options(mut self, options: Vec<String>) -> ObjsTeamProfileField {
    self.options = options;
    self
  }

  pub fn options(&self) -> &Vec<String> {
    &self.options
  }


  pub fn set_ordering(&mut self, ordering: f32) {
    self.ordering = ordering;
  }

  pub fn with_ordering(mut self, ordering: f32) -> ObjsTeamProfileField {
    self.ordering = ordering;
    self
  }

  pub fn ordering(&self) -> &f32 {
    &self.ordering
  }


  pub fn set_possible_values(&mut self, possible_values: Vec<String>) {
    self.possible_values = Some(possible_values);
  }

  pub fn with_possible_values(mut self, possible_values: Vec<String>) -> ObjsTeamProfileField {
    self.possible_values = Some(possible_values);
    self
  }

  pub fn possible_values(&self) -> Option<&Vec<String>> {
    self.possible_values.as_ref()
  }

  pub fn reset_possible_values(&mut self) {
    self.possible_values = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> ObjsTeamProfileField {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


}



