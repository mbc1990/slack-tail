/* 
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * OpenAPI spec version: 1.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ObjsFile {
  #[serde(rename = "channels")]
  channels: Option<Vec<::models::DefsChannelId>>,
  #[serde(rename = "comments_count")]
  comments_count: Option<i32>,
  #[serde(rename = "created")]
  created: Option<i32>,
  #[serde(rename = "date_delete")]
  date_delete: Option<i32>,
  #[serde(rename = "display_as_bot")]
  display_as_bot: Option<bool>,
  #[serde(rename = "editable")]
  editable: Option<bool>,
  #[serde(rename = "editor")]
  editor: Option<::models::DefsUserId>,
  #[serde(rename = "external_id")]
  external_id: Option<String>,
  #[serde(rename = "external_type")]
  external_type: Option<String>,
  #[serde(rename = "external_url")]
  external_url: Option<String>,
  #[serde(rename = "filetype")]
  filetype: Option<String>,
  #[serde(rename = "groups")]
  groups: Option<Vec<::models::DefsGroupId>>,
  #[serde(rename = "has_rich_preview")]
  has_rich_preview: Option<bool>,
  #[serde(rename = "id")]
  id: Option<::models::DefsFileId>,
  #[serde(rename = "image_exif_rotation")]
  image_exif_rotation: Option<i32>,
  #[serde(rename = "ims")]
  ims: Option<Vec<::models::DefsDmId>>,
  #[serde(rename = "is_external")]
  is_external: Option<bool>,
  #[serde(rename = "is_public")]
  is_public: Option<bool>,
  #[serde(rename = "is_starred")]
  is_starred: Option<bool>,
  #[serde(rename = "is_tombstoned")]
  is_tombstoned: Option<bool>,
  #[serde(rename = "last_editor")]
  last_editor: Option<::models::DefsUserId>,
  #[serde(rename = "mimetype")]
  mimetype: Option<String>,
  #[serde(rename = "mode")]
  mode: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "non_owner_editable")]
  non_owner_editable: Option<bool>,
  #[serde(rename = "num_stars")]
  num_stars: Option<i32>,
  #[serde(rename = "original_h")]
  original_h: Option<i32>,
  #[serde(rename = "original_w")]
  original_w: Option<i32>,
  #[serde(rename = "permalink")]
  permalink: Option<String>,
  #[serde(rename = "permalink_public")]
  permalink_public: Option<String>,
  #[serde(rename = "pinned_info")]
  pinned_info: Option<::models::DefsPinnedInfo>,
  #[serde(rename = "pinned_to")]
  pinned_to: Option<Vec<::models::DefsChannel>>,
  #[serde(rename = "pretty_type")]
  pretty_type: Option<String>,
  #[serde(rename = "preview")]
  preview: Option<String>,
  #[serde(rename = "public_url_shared")]
  public_url_shared: Option<bool>,
  #[serde(rename = "reactions")]
  reactions: Option<Vec<::models::ObjsReaction>>,
  #[serde(rename = "shares")]
  shares: Option<::models::ObjsFileShares>,
  #[serde(rename = "size")]
  size: Option<i32>,
  #[serde(rename = "source_team")]
  source_team: Option<::models::DefsTeam>,
  #[serde(rename = "state")]
  state: Option<String>,
  #[serde(rename = "thumb_1024")]
  thumb_1024: Option<String>,
  #[serde(rename = "thumb_1024_h")]
  thumb_1024_h: Option<i32>,
  #[serde(rename = "thumb_1024_w")]
  thumb_1024_w: Option<i32>,
  #[serde(rename = "thumb_160")]
  thumb_160: Option<String>,
  #[serde(rename = "thumb_360")]
  thumb_360: Option<String>,
  #[serde(rename = "thumb_360_h")]
  thumb_360_h: Option<i32>,
  #[serde(rename = "thumb_360_w")]
  thumb_360_w: Option<i32>,
  #[serde(rename = "thumb_480")]
  thumb_480: Option<String>,
  #[serde(rename = "thumb_480_h")]
  thumb_480_h: Option<i32>,
  #[serde(rename = "thumb_480_w")]
  thumb_480_w: Option<i32>,
  #[serde(rename = "thumb_64")]
  thumb_64: Option<String>,
  #[serde(rename = "thumb_720")]
  thumb_720: Option<String>,
  #[serde(rename = "thumb_720_h")]
  thumb_720_h: Option<i32>,
  #[serde(rename = "thumb_720_w")]
  thumb_720_w: Option<i32>,
  #[serde(rename = "thumb_80")]
  thumb_80: Option<String>,
  #[serde(rename = "thumb_800")]
  thumb_800: Option<String>,
  #[serde(rename = "thumb_800_h")]
  thumb_800_h: Option<i32>,
  #[serde(rename = "thumb_800_w")]
  thumb_800_w: Option<i32>,
  #[serde(rename = "thumb_960")]
  thumb_960: Option<String>,
  #[serde(rename = "thumb_960_h")]
  thumb_960_h: Option<i32>,
  #[serde(rename = "thumb_960_w")]
  thumb_960_w: Option<i32>,
  #[serde(rename = "thumb_tiny")]
  thumb_tiny: Option<String>,
  #[serde(rename = "timestamp")]
  timestamp: Option<i32>,
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "updated")]
  updated: Option<i32>,
  #[serde(rename = "url_private")]
  url_private: Option<String>,
  #[serde(rename = "url_private_download")]
  url_private_download: Option<String>,
  #[serde(rename = "user")]
  user: Option<String>,
  #[serde(rename = "user_team")]
  user_team: Option<::models::DefsTeam>,
  #[serde(rename = "username")]
  username: Option<String>
}

impl ObjsFile {
  pub fn new() -> ObjsFile {
    ObjsFile {
      channels: None,
      comments_count: None,
      created: None,
      date_delete: None,
      display_as_bot: None,
      editable: None,
      editor: None,
      external_id: None,
      external_type: None,
      external_url: None,
      filetype: None,
      groups: None,
      has_rich_preview: None,
      id: None,
      image_exif_rotation: None,
      ims: None,
      is_external: None,
      is_public: None,
      is_starred: None,
      is_tombstoned: None,
      last_editor: None,
      mimetype: None,
      mode: None,
      name: None,
      non_owner_editable: None,
      num_stars: None,
      original_h: None,
      original_w: None,
      permalink: None,
      permalink_public: None,
      pinned_info: None,
      pinned_to: None,
      pretty_type: None,
      preview: None,
      public_url_shared: None,
      reactions: None,
      shares: None,
      size: None,
      source_team: None,
      state: None,
      thumb_1024: None,
      thumb_1024_h: None,
      thumb_1024_w: None,
      thumb_160: None,
      thumb_360: None,
      thumb_360_h: None,
      thumb_360_w: None,
      thumb_480: None,
      thumb_480_h: None,
      thumb_480_w: None,
      thumb_64: None,
      thumb_720: None,
      thumb_720_h: None,
      thumb_720_w: None,
      thumb_80: None,
      thumb_800: None,
      thumb_800_h: None,
      thumb_800_w: None,
      thumb_960: None,
      thumb_960_h: None,
      thumb_960_w: None,
      thumb_tiny: None,
      timestamp: None,
      title: None,
      updated: None,
      url_private: None,
      url_private_download: None,
      user: None,
      user_team: None,
      username: None
    }
  }

  pub fn set_channels(&mut self, channels: Vec<::models::DefsChannelId>) {
    self.channels = Some(channels);
  }

  pub fn with_channels(mut self, channels: Vec<::models::DefsChannelId>) -> ObjsFile {
    self.channels = Some(channels);
    self
  }

  pub fn channels(&self) -> Option<&Vec<::models::DefsChannelId>> {
    self.channels.as_ref()
  }

  pub fn reset_channels(&mut self) {
    self.channels = None;
  }

  pub fn set_comments_count(&mut self, comments_count: i32) {
    self.comments_count = Some(comments_count);
  }

  pub fn with_comments_count(mut self, comments_count: i32) -> ObjsFile {
    self.comments_count = Some(comments_count);
    self
  }

  pub fn comments_count(&self) -> Option<&i32> {
    self.comments_count.as_ref()
  }

  pub fn reset_comments_count(&mut self) {
    self.comments_count = None;
  }

  pub fn set_created(&mut self, created: i32) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i32) -> ObjsFile {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i32> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_date_delete(&mut self, date_delete: i32) {
    self.date_delete = Some(date_delete);
  }

  pub fn with_date_delete(mut self, date_delete: i32) -> ObjsFile {
    self.date_delete = Some(date_delete);
    self
  }

  pub fn date_delete(&self) -> Option<&i32> {
    self.date_delete.as_ref()
  }

  pub fn reset_date_delete(&mut self) {
    self.date_delete = None;
  }

  pub fn set_display_as_bot(&mut self, display_as_bot: bool) {
    self.display_as_bot = Some(display_as_bot);
  }

  pub fn with_display_as_bot(mut self, display_as_bot: bool) -> ObjsFile {
    self.display_as_bot = Some(display_as_bot);
    self
  }

  pub fn display_as_bot(&self) -> Option<&bool> {
    self.display_as_bot.as_ref()
  }

  pub fn reset_display_as_bot(&mut self) {
    self.display_as_bot = None;
  }

  pub fn set_editable(&mut self, editable: bool) {
    self.editable = Some(editable);
  }

  pub fn with_editable(mut self, editable: bool) -> ObjsFile {
    self.editable = Some(editable);
    self
  }

  pub fn editable(&self) -> Option<&bool> {
    self.editable.as_ref()
  }

  pub fn reset_editable(&mut self) {
    self.editable = None;
  }

  pub fn set_editor(&mut self, editor: ::models::DefsUserId) {
    self.editor = Some(editor);
  }

  pub fn with_editor(mut self, editor: ::models::DefsUserId) -> ObjsFile {
    self.editor = Some(editor);
    self
  }

  pub fn editor(&self) -> Option<&::models::DefsUserId> {
    self.editor.as_ref()
  }

  pub fn reset_editor(&mut self) {
    self.editor = None;
  }

  pub fn set_external_id(&mut self, external_id: String) {
    self.external_id = Some(external_id);
  }

  pub fn with_external_id(mut self, external_id: String) -> ObjsFile {
    self.external_id = Some(external_id);
    self
  }

  pub fn external_id(&self) -> Option<&String> {
    self.external_id.as_ref()
  }

  pub fn reset_external_id(&mut self) {
    self.external_id = None;
  }

  pub fn set_external_type(&mut self, external_type: String) {
    self.external_type = Some(external_type);
  }

  pub fn with_external_type(mut self, external_type: String) -> ObjsFile {
    self.external_type = Some(external_type);
    self
  }

  pub fn external_type(&self) -> Option<&String> {
    self.external_type.as_ref()
  }

  pub fn reset_external_type(&mut self) {
    self.external_type = None;
  }

  pub fn set_external_url(&mut self, external_url: String) {
    self.external_url = Some(external_url);
  }

  pub fn with_external_url(mut self, external_url: String) -> ObjsFile {
    self.external_url = Some(external_url);
    self
  }

  pub fn external_url(&self) -> Option<&String> {
    self.external_url.as_ref()
  }

  pub fn reset_external_url(&mut self) {
    self.external_url = None;
  }

  pub fn set_filetype(&mut self, filetype: String) {
    self.filetype = Some(filetype);
  }

  pub fn with_filetype(mut self, filetype: String) -> ObjsFile {
    self.filetype = Some(filetype);
    self
  }

  pub fn filetype(&self) -> Option<&String> {
    self.filetype.as_ref()
  }

  pub fn reset_filetype(&mut self) {
    self.filetype = None;
  }

  pub fn set_groups(&mut self, groups: Vec<::models::DefsGroupId>) {
    self.groups = Some(groups);
  }

  pub fn with_groups(mut self, groups: Vec<::models::DefsGroupId>) -> ObjsFile {
    self.groups = Some(groups);
    self
  }

  pub fn groups(&self) -> Option<&Vec<::models::DefsGroupId>> {
    self.groups.as_ref()
  }

  pub fn reset_groups(&mut self) {
    self.groups = None;
  }

  pub fn set_has_rich_preview(&mut self, has_rich_preview: bool) {
    self.has_rich_preview = Some(has_rich_preview);
  }

  pub fn with_has_rich_preview(mut self, has_rich_preview: bool) -> ObjsFile {
    self.has_rich_preview = Some(has_rich_preview);
    self
  }

  pub fn has_rich_preview(&self) -> Option<&bool> {
    self.has_rich_preview.as_ref()
  }

  pub fn reset_has_rich_preview(&mut self) {
    self.has_rich_preview = None;
  }

  pub fn set_id(&mut self, id: ::models::DefsFileId) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: ::models::DefsFileId) -> ObjsFile {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&::models::DefsFileId> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_image_exif_rotation(&mut self, image_exif_rotation: i32) {
    self.image_exif_rotation = Some(image_exif_rotation);
  }

  pub fn with_image_exif_rotation(mut self, image_exif_rotation: i32) -> ObjsFile {
    self.image_exif_rotation = Some(image_exif_rotation);
    self
  }

  pub fn image_exif_rotation(&self) -> Option<&i32> {
    self.image_exif_rotation.as_ref()
  }

  pub fn reset_image_exif_rotation(&mut self) {
    self.image_exif_rotation = None;
  }

  pub fn set_ims(&mut self, ims: Vec<::models::DefsDmId>) {
    self.ims = Some(ims);
  }

  pub fn with_ims(mut self, ims: Vec<::models::DefsDmId>) -> ObjsFile {
    self.ims = Some(ims);
    self
  }

  pub fn ims(&self) -> Option<&Vec<::models::DefsDmId>> {
    self.ims.as_ref()
  }

  pub fn reset_ims(&mut self) {
    self.ims = None;
  }

  pub fn set_is_external(&mut self, is_external: bool) {
    self.is_external = Some(is_external);
  }

  pub fn with_is_external(mut self, is_external: bool) -> ObjsFile {
    self.is_external = Some(is_external);
    self
  }

  pub fn is_external(&self) -> Option<&bool> {
    self.is_external.as_ref()
  }

  pub fn reset_is_external(&mut self) {
    self.is_external = None;
  }

  pub fn set_is_public(&mut self, is_public: bool) {
    self.is_public = Some(is_public);
  }

  pub fn with_is_public(mut self, is_public: bool) -> ObjsFile {
    self.is_public = Some(is_public);
    self
  }

  pub fn is_public(&self) -> Option<&bool> {
    self.is_public.as_ref()
  }

  pub fn reset_is_public(&mut self) {
    self.is_public = None;
  }

  pub fn set_is_starred(&mut self, is_starred: bool) {
    self.is_starred = Some(is_starred);
  }

  pub fn with_is_starred(mut self, is_starred: bool) -> ObjsFile {
    self.is_starred = Some(is_starred);
    self
  }

  pub fn is_starred(&self) -> Option<&bool> {
    self.is_starred.as_ref()
  }

  pub fn reset_is_starred(&mut self) {
    self.is_starred = None;
  }

  pub fn set_is_tombstoned(&mut self, is_tombstoned: bool) {
    self.is_tombstoned = Some(is_tombstoned);
  }

  pub fn with_is_tombstoned(mut self, is_tombstoned: bool) -> ObjsFile {
    self.is_tombstoned = Some(is_tombstoned);
    self
  }

  pub fn is_tombstoned(&self) -> Option<&bool> {
    self.is_tombstoned.as_ref()
  }

  pub fn reset_is_tombstoned(&mut self) {
    self.is_tombstoned = None;
  }

  pub fn set_last_editor(&mut self, last_editor: ::models::DefsUserId) {
    self.last_editor = Some(last_editor);
  }

  pub fn with_last_editor(mut self, last_editor: ::models::DefsUserId) -> ObjsFile {
    self.last_editor = Some(last_editor);
    self
  }

  pub fn last_editor(&self) -> Option<&::models::DefsUserId> {
    self.last_editor.as_ref()
  }

  pub fn reset_last_editor(&mut self) {
    self.last_editor = None;
  }

  pub fn set_mimetype(&mut self, mimetype: String) {
    self.mimetype = Some(mimetype);
  }

  pub fn with_mimetype(mut self, mimetype: String) -> ObjsFile {
    self.mimetype = Some(mimetype);
    self
  }

  pub fn mimetype(&self) -> Option<&String> {
    self.mimetype.as_ref()
  }

  pub fn reset_mimetype(&mut self) {
    self.mimetype = None;
  }

  pub fn set_mode(&mut self, mode: String) {
    self.mode = Some(mode);
  }

  pub fn with_mode(mut self, mode: String) -> ObjsFile {
    self.mode = Some(mode);
    self
  }

  pub fn mode(&self) -> Option<&String> {
    self.mode.as_ref()
  }

  pub fn reset_mode(&mut self) {
    self.mode = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ObjsFile {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_non_owner_editable(&mut self, non_owner_editable: bool) {
    self.non_owner_editable = Some(non_owner_editable);
  }

  pub fn with_non_owner_editable(mut self, non_owner_editable: bool) -> ObjsFile {
    self.non_owner_editable = Some(non_owner_editable);
    self
  }

  pub fn non_owner_editable(&self) -> Option<&bool> {
    self.non_owner_editable.as_ref()
  }

  pub fn reset_non_owner_editable(&mut self) {
    self.non_owner_editable = None;
  }

  pub fn set_num_stars(&mut self, num_stars: i32) {
    self.num_stars = Some(num_stars);
  }

  pub fn with_num_stars(mut self, num_stars: i32) -> ObjsFile {
    self.num_stars = Some(num_stars);
    self
  }

  pub fn num_stars(&self) -> Option<&i32> {
    self.num_stars.as_ref()
  }

  pub fn reset_num_stars(&mut self) {
    self.num_stars = None;
  }

  pub fn set_original_h(&mut self, original_h: i32) {
    self.original_h = Some(original_h);
  }

  pub fn with_original_h(mut self, original_h: i32) -> ObjsFile {
    self.original_h = Some(original_h);
    self
  }

  pub fn original_h(&self) -> Option<&i32> {
    self.original_h.as_ref()
  }

  pub fn reset_original_h(&mut self) {
    self.original_h = None;
  }

  pub fn set_original_w(&mut self, original_w: i32) {
    self.original_w = Some(original_w);
  }

  pub fn with_original_w(mut self, original_w: i32) -> ObjsFile {
    self.original_w = Some(original_w);
    self
  }

  pub fn original_w(&self) -> Option<&i32> {
    self.original_w.as_ref()
  }

  pub fn reset_original_w(&mut self) {
    self.original_w = None;
  }

  pub fn set_permalink(&mut self, permalink: String) {
    self.permalink = Some(permalink);
  }

  pub fn with_permalink(mut self, permalink: String) -> ObjsFile {
    self.permalink = Some(permalink);
    self
  }

  pub fn permalink(&self) -> Option<&String> {
    self.permalink.as_ref()
  }

  pub fn reset_permalink(&mut self) {
    self.permalink = None;
  }

  pub fn set_permalink_public(&mut self, permalink_public: String) {
    self.permalink_public = Some(permalink_public);
  }

  pub fn with_permalink_public(mut self, permalink_public: String) -> ObjsFile {
    self.permalink_public = Some(permalink_public);
    self
  }

  pub fn permalink_public(&self) -> Option<&String> {
    self.permalink_public.as_ref()
  }

  pub fn reset_permalink_public(&mut self) {
    self.permalink_public = None;
  }

  pub fn set_pinned_info(&mut self, pinned_info: ::models::DefsPinnedInfo) {
    self.pinned_info = Some(pinned_info);
  }

  pub fn with_pinned_info(mut self, pinned_info: ::models::DefsPinnedInfo) -> ObjsFile {
    self.pinned_info = Some(pinned_info);
    self
  }

  pub fn pinned_info(&self) -> Option<&::models::DefsPinnedInfo> {
    self.pinned_info.as_ref()
  }

  pub fn reset_pinned_info(&mut self) {
    self.pinned_info = None;
  }

  pub fn set_pinned_to(&mut self, pinned_to: Vec<::models::DefsChannel>) {
    self.pinned_to = Some(pinned_to);
  }

  pub fn with_pinned_to(mut self, pinned_to: Vec<::models::DefsChannel>) -> ObjsFile {
    self.pinned_to = Some(pinned_to);
    self
  }

  pub fn pinned_to(&self) -> Option<&Vec<::models::DefsChannel>> {
    self.pinned_to.as_ref()
  }

  pub fn reset_pinned_to(&mut self) {
    self.pinned_to = None;
  }

  pub fn set_pretty_type(&mut self, pretty_type: String) {
    self.pretty_type = Some(pretty_type);
  }

  pub fn with_pretty_type(mut self, pretty_type: String) -> ObjsFile {
    self.pretty_type = Some(pretty_type);
    self
  }

  pub fn pretty_type(&self) -> Option<&String> {
    self.pretty_type.as_ref()
  }

  pub fn reset_pretty_type(&mut self) {
    self.pretty_type = None;
  }

  pub fn set_preview(&mut self, preview: String) {
    self.preview = Some(preview);
  }

  pub fn with_preview(mut self, preview: String) -> ObjsFile {
    self.preview = Some(preview);
    self
  }

  pub fn preview(&self) -> Option<&String> {
    self.preview.as_ref()
  }

  pub fn reset_preview(&mut self) {
    self.preview = None;
  }

  pub fn set_public_url_shared(&mut self, public_url_shared: bool) {
    self.public_url_shared = Some(public_url_shared);
  }

  pub fn with_public_url_shared(mut self, public_url_shared: bool) -> ObjsFile {
    self.public_url_shared = Some(public_url_shared);
    self
  }

  pub fn public_url_shared(&self) -> Option<&bool> {
    self.public_url_shared.as_ref()
  }

  pub fn reset_public_url_shared(&mut self) {
    self.public_url_shared = None;
  }

  pub fn set_reactions(&mut self, reactions: Vec<::models::ObjsReaction>) {
    self.reactions = Some(reactions);
  }

  pub fn with_reactions(mut self, reactions: Vec<::models::ObjsReaction>) -> ObjsFile {
    self.reactions = Some(reactions);
    self
  }

  pub fn reactions(&self) -> Option<&Vec<::models::ObjsReaction>> {
    self.reactions.as_ref()
  }

  pub fn reset_reactions(&mut self) {
    self.reactions = None;
  }

  pub fn set_shares(&mut self, shares: ::models::ObjsFileShares) {
    self.shares = Some(shares);
  }

  pub fn with_shares(mut self, shares: ::models::ObjsFileShares) -> ObjsFile {
    self.shares = Some(shares);
    self
  }

  pub fn shares(&self) -> Option<&::models::ObjsFileShares> {
    self.shares.as_ref()
  }

  pub fn reset_shares(&mut self) {
    self.shares = None;
  }

  pub fn set_size(&mut self, size: i32) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: i32) -> ObjsFile {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&i32> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set_source_team(&mut self, source_team: ::models::DefsTeam) {
    self.source_team = Some(source_team);
  }

  pub fn with_source_team(mut self, source_team: ::models::DefsTeam) -> ObjsFile {
    self.source_team = Some(source_team);
    self
  }

  pub fn source_team(&self) -> Option<&::models::DefsTeam> {
    self.source_team.as_ref()
  }

  pub fn reset_source_team(&mut self) {
    self.source_team = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> ObjsFile {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_thumb_1024(&mut self, thumb_1024: String) {
    self.thumb_1024 = Some(thumb_1024);
  }

  pub fn with_thumb_1024(mut self, thumb_1024: String) -> ObjsFile {
    self.thumb_1024 = Some(thumb_1024);
    self
  }

  pub fn thumb_1024(&self) -> Option<&String> {
    self.thumb_1024.as_ref()
  }

  pub fn reset_thumb_1024(&mut self) {
    self.thumb_1024 = None;
  }

  pub fn set_thumb_1024_h(&mut self, thumb_1024_h: i32) {
    self.thumb_1024_h = Some(thumb_1024_h);
  }

  pub fn with_thumb_1024_h(mut self, thumb_1024_h: i32) -> ObjsFile {
    self.thumb_1024_h = Some(thumb_1024_h);
    self
  }

  pub fn thumb_1024_h(&self) -> Option<&i32> {
    self.thumb_1024_h.as_ref()
  }

  pub fn reset_thumb_1024_h(&mut self) {
    self.thumb_1024_h = None;
  }

  pub fn set_thumb_1024_w(&mut self, thumb_1024_w: i32) {
    self.thumb_1024_w = Some(thumb_1024_w);
  }

  pub fn with_thumb_1024_w(mut self, thumb_1024_w: i32) -> ObjsFile {
    self.thumb_1024_w = Some(thumb_1024_w);
    self
  }

  pub fn thumb_1024_w(&self) -> Option<&i32> {
    self.thumb_1024_w.as_ref()
  }

  pub fn reset_thumb_1024_w(&mut self) {
    self.thumb_1024_w = None;
  }

  pub fn set_thumb_160(&mut self, thumb_160: String) {
    self.thumb_160 = Some(thumb_160);
  }

  pub fn with_thumb_160(mut self, thumb_160: String) -> ObjsFile {
    self.thumb_160 = Some(thumb_160);
    self
  }

  pub fn thumb_160(&self) -> Option<&String> {
    self.thumb_160.as_ref()
  }

  pub fn reset_thumb_160(&mut self) {
    self.thumb_160 = None;
  }

  pub fn set_thumb_360(&mut self, thumb_360: String) {
    self.thumb_360 = Some(thumb_360);
  }

  pub fn with_thumb_360(mut self, thumb_360: String) -> ObjsFile {
    self.thumb_360 = Some(thumb_360);
    self
  }

  pub fn thumb_360(&self) -> Option<&String> {
    self.thumb_360.as_ref()
  }

  pub fn reset_thumb_360(&mut self) {
    self.thumb_360 = None;
  }

  pub fn set_thumb_360_h(&mut self, thumb_360_h: i32) {
    self.thumb_360_h = Some(thumb_360_h);
  }

  pub fn with_thumb_360_h(mut self, thumb_360_h: i32) -> ObjsFile {
    self.thumb_360_h = Some(thumb_360_h);
    self
  }

  pub fn thumb_360_h(&self) -> Option<&i32> {
    self.thumb_360_h.as_ref()
  }

  pub fn reset_thumb_360_h(&mut self) {
    self.thumb_360_h = None;
  }

  pub fn set_thumb_360_w(&mut self, thumb_360_w: i32) {
    self.thumb_360_w = Some(thumb_360_w);
  }

  pub fn with_thumb_360_w(mut self, thumb_360_w: i32) -> ObjsFile {
    self.thumb_360_w = Some(thumb_360_w);
    self
  }

  pub fn thumb_360_w(&self) -> Option<&i32> {
    self.thumb_360_w.as_ref()
  }

  pub fn reset_thumb_360_w(&mut self) {
    self.thumb_360_w = None;
  }

  pub fn set_thumb_480(&mut self, thumb_480: String) {
    self.thumb_480 = Some(thumb_480);
  }

  pub fn with_thumb_480(mut self, thumb_480: String) -> ObjsFile {
    self.thumb_480 = Some(thumb_480);
    self
  }

  pub fn thumb_480(&self) -> Option<&String> {
    self.thumb_480.as_ref()
  }

  pub fn reset_thumb_480(&mut self) {
    self.thumb_480 = None;
  }

  pub fn set_thumb_480_h(&mut self, thumb_480_h: i32) {
    self.thumb_480_h = Some(thumb_480_h);
  }

  pub fn with_thumb_480_h(mut self, thumb_480_h: i32) -> ObjsFile {
    self.thumb_480_h = Some(thumb_480_h);
    self
  }

  pub fn thumb_480_h(&self) -> Option<&i32> {
    self.thumb_480_h.as_ref()
  }

  pub fn reset_thumb_480_h(&mut self) {
    self.thumb_480_h = None;
  }

  pub fn set_thumb_480_w(&mut self, thumb_480_w: i32) {
    self.thumb_480_w = Some(thumb_480_w);
  }

  pub fn with_thumb_480_w(mut self, thumb_480_w: i32) -> ObjsFile {
    self.thumb_480_w = Some(thumb_480_w);
    self
  }

  pub fn thumb_480_w(&self) -> Option<&i32> {
    self.thumb_480_w.as_ref()
  }

  pub fn reset_thumb_480_w(&mut self) {
    self.thumb_480_w = None;
  }

  pub fn set_thumb_64(&mut self, thumb_64: String) {
    self.thumb_64 = Some(thumb_64);
  }

  pub fn with_thumb_64(mut self, thumb_64: String) -> ObjsFile {
    self.thumb_64 = Some(thumb_64);
    self
  }

  pub fn thumb_64(&self) -> Option<&String> {
    self.thumb_64.as_ref()
  }

  pub fn reset_thumb_64(&mut self) {
    self.thumb_64 = None;
  }

  pub fn set_thumb_720(&mut self, thumb_720: String) {
    self.thumb_720 = Some(thumb_720);
  }

  pub fn with_thumb_720(mut self, thumb_720: String) -> ObjsFile {
    self.thumb_720 = Some(thumb_720);
    self
  }

  pub fn thumb_720(&self) -> Option<&String> {
    self.thumb_720.as_ref()
  }

  pub fn reset_thumb_720(&mut self) {
    self.thumb_720 = None;
  }

  pub fn set_thumb_720_h(&mut self, thumb_720_h: i32) {
    self.thumb_720_h = Some(thumb_720_h);
  }

  pub fn with_thumb_720_h(mut self, thumb_720_h: i32) -> ObjsFile {
    self.thumb_720_h = Some(thumb_720_h);
    self
  }

  pub fn thumb_720_h(&self) -> Option<&i32> {
    self.thumb_720_h.as_ref()
  }

  pub fn reset_thumb_720_h(&mut self) {
    self.thumb_720_h = None;
  }

  pub fn set_thumb_720_w(&mut self, thumb_720_w: i32) {
    self.thumb_720_w = Some(thumb_720_w);
  }

  pub fn with_thumb_720_w(mut self, thumb_720_w: i32) -> ObjsFile {
    self.thumb_720_w = Some(thumb_720_w);
    self
  }

  pub fn thumb_720_w(&self) -> Option<&i32> {
    self.thumb_720_w.as_ref()
  }

  pub fn reset_thumb_720_w(&mut self) {
    self.thumb_720_w = None;
  }

  pub fn set_thumb_80(&mut self, thumb_80: String) {
    self.thumb_80 = Some(thumb_80);
  }

  pub fn with_thumb_80(mut self, thumb_80: String) -> ObjsFile {
    self.thumb_80 = Some(thumb_80);
    self
  }

  pub fn thumb_80(&self) -> Option<&String> {
    self.thumb_80.as_ref()
  }

  pub fn reset_thumb_80(&mut self) {
    self.thumb_80 = None;
  }

  pub fn set_thumb_800(&mut self, thumb_800: String) {
    self.thumb_800 = Some(thumb_800);
  }

  pub fn with_thumb_800(mut self, thumb_800: String) -> ObjsFile {
    self.thumb_800 = Some(thumb_800);
    self
  }

  pub fn thumb_800(&self) -> Option<&String> {
    self.thumb_800.as_ref()
  }

  pub fn reset_thumb_800(&mut self) {
    self.thumb_800 = None;
  }

  pub fn set_thumb_800_h(&mut self, thumb_800_h: i32) {
    self.thumb_800_h = Some(thumb_800_h);
  }

  pub fn with_thumb_800_h(mut self, thumb_800_h: i32) -> ObjsFile {
    self.thumb_800_h = Some(thumb_800_h);
    self
  }

  pub fn thumb_800_h(&self) -> Option<&i32> {
    self.thumb_800_h.as_ref()
  }

  pub fn reset_thumb_800_h(&mut self) {
    self.thumb_800_h = None;
  }

  pub fn set_thumb_800_w(&mut self, thumb_800_w: i32) {
    self.thumb_800_w = Some(thumb_800_w);
  }

  pub fn with_thumb_800_w(mut self, thumb_800_w: i32) -> ObjsFile {
    self.thumb_800_w = Some(thumb_800_w);
    self
  }

  pub fn thumb_800_w(&self) -> Option<&i32> {
    self.thumb_800_w.as_ref()
  }

  pub fn reset_thumb_800_w(&mut self) {
    self.thumb_800_w = None;
  }

  pub fn set_thumb_960(&mut self, thumb_960: String) {
    self.thumb_960 = Some(thumb_960);
  }

  pub fn with_thumb_960(mut self, thumb_960: String) -> ObjsFile {
    self.thumb_960 = Some(thumb_960);
    self
  }

  pub fn thumb_960(&self) -> Option<&String> {
    self.thumb_960.as_ref()
  }

  pub fn reset_thumb_960(&mut self) {
    self.thumb_960 = None;
  }

  pub fn set_thumb_960_h(&mut self, thumb_960_h: i32) {
    self.thumb_960_h = Some(thumb_960_h);
  }

  pub fn with_thumb_960_h(mut self, thumb_960_h: i32) -> ObjsFile {
    self.thumb_960_h = Some(thumb_960_h);
    self
  }

  pub fn thumb_960_h(&self) -> Option<&i32> {
    self.thumb_960_h.as_ref()
  }

  pub fn reset_thumb_960_h(&mut self) {
    self.thumb_960_h = None;
  }

  pub fn set_thumb_960_w(&mut self, thumb_960_w: i32) {
    self.thumb_960_w = Some(thumb_960_w);
  }

  pub fn with_thumb_960_w(mut self, thumb_960_w: i32) -> ObjsFile {
    self.thumb_960_w = Some(thumb_960_w);
    self
  }

  pub fn thumb_960_w(&self) -> Option<&i32> {
    self.thumb_960_w.as_ref()
  }

  pub fn reset_thumb_960_w(&mut self) {
    self.thumb_960_w = None;
  }

  pub fn set_thumb_tiny(&mut self, thumb_tiny: String) {
    self.thumb_tiny = Some(thumb_tiny);
  }

  pub fn with_thumb_tiny(mut self, thumb_tiny: String) -> ObjsFile {
    self.thumb_tiny = Some(thumb_tiny);
    self
  }

  pub fn thumb_tiny(&self) -> Option<&String> {
    self.thumb_tiny.as_ref()
  }

  pub fn reset_thumb_tiny(&mut self) {
    self.thumb_tiny = None;
  }

  pub fn set_timestamp(&mut self, timestamp: i32) {
    self.timestamp = Some(timestamp);
  }

  pub fn with_timestamp(mut self, timestamp: i32) -> ObjsFile {
    self.timestamp = Some(timestamp);
    self
  }

  pub fn timestamp(&self) -> Option<&i32> {
    self.timestamp.as_ref()
  }

  pub fn reset_timestamp(&mut self) {
    self.timestamp = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> ObjsFile {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_updated(&mut self, updated: i32) {
    self.updated = Some(updated);
  }

  pub fn with_updated(mut self, updated: i32) -> ObjsFile {
    self.updated = Some(updated);
    self
  }

  pub fn updated(&self) -> Option<&i32> {
    self.updated.as_ref()
  }

  pub fn reset_updated(&mut self) {
    self.updated = None;
  }

  pub fn set_url_private(&mut self, url_private: String) {
    self.url_private = Some(url_private);
  }

  pub fn with_url_private(mut self, url_private: String) -> ObjsFile {
    self.url_private = Some(url_private);
    self
  }

  pub fn url_private(&self) -> Option<&String> {
    self.url_private.as_ref()
  }

  pub fn reset_url_private(&mut self) {
    self.url_private = None;
  }

  pub fn set_url_private_download(&mut self, url_private_download: String) {
    self.url_private_download = Some(url_private_download);
  }

  pub fn with_url_private_download(mut self, url_private_download: String) -> ObjsFile {
    self.url_private_download = Some(url_private_download);
    self
  }

  pub fn url_private_download(&self) -> Option<&String> {
    self.url_private_download.as_ref()
  }

  pub fn reset_url_private_download(&mut self) {
    self.url_private_download = None;
  }

  pub fn set_user(&mut self, user: String) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: String) -> ObjsFile {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&String> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

  pub fn set_user_team(&mut self, user_team: ::models::DefsTeam) {
    self.user_team = Some(user_team);
  }

  pub fn with_user_team(mut self, user_team: ::models::DefsTeam) -> ObjsFile {
    self.user_team = Some(user_team);
    self
  }

  pub fn user_team(&self) -> Option<&::models::DefsTeam> {
    self.user_team.as_ref()
  }

  pub fn reset_user_team(&mut self) {
    self.user_team = None;
  }

  pub fn set_username(&mut self, username: String) {
    self.username = Some(username);
  }

  pub fn with_username(mut self, username: String) -> ObjsFile {
    self.username = Some(username);
    self
  }

  pub fn username(&self) -> Option<&String> {
    self.username.as_ref()
  }

  pub fn reset_username(&mut self) {
    self.username = None;
  }

}



