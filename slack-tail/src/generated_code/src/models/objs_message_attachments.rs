/* 
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * OpenAPI spec version: 1.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ObjsMessageAttachments {
  #[serde(rename = "fallback")]
  fallback: Option<String>,
  #[serde(rename = "id")]
  id: i32,
  #[serde(rename = "image_bytes")]
  image_bytes: Option<i32>,
  #[serde(rename = "image_height")]
  image_height: Option<i32>,
  #[serde(rename = "image_url")]
  image_url: Option<String>,
  #[serde(rename = "image_width")]
  image_width: Option<i32>
}

impl ObjsMessageAttachments {
  pub fn new(id: i32) -> ObjsMessageAttachments {
    ObjsMessageAttachments {
      fallback: None,
      id: id,
      image_bytes: None,
      image_height: None,
      image_url: None,
      image_width: None
    }
  }

  pub fn set_fallback(&mut self, fallback: String) {
    self.fallback = Some(fallback);
  }

  pub fn with_fallback(mut self, fallback: String) -> ObjsMessageAttachments {
    self.fallback = Some(fallback);
    self
  }

  pub fn fallback(&self) -> Option<&String> {
    self.fallback.as_ref()
  }

  pub fn reset_fallback(&mut self) {
    self.fallback = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = id;
  }

  pub fn with_id(mut self, id: i32) -> ObjsMessageAttachments {
    self.id = id;
    self
  }

  pub fn id(&self) -> &i32 {
    &self.id
  }


  pub fn set_image_bytes(&mut self, image_bytes: i32) {
    self.image_bytes = Some(image_bytes);
  }

  pub fn with_image_bytes(mut self, image_bytes: i32) -> ObjsMessageAttachments {
    self.image_bytes = Some(image_bytes);
    self
  }

  pub fn image_bytes(&self) -> Option<&i32> {
    self.image_bytes.as_ref()
  }

  pub fn reset_image_bytes(&mut self) {
    self.image_bytes = None;
  }

  pub fn set_image_height(&mut self, image_height: i32) {
    self.image_height = Some(image_height);
  }

  pub fn with_image_height(mut self, image_height: i32) -> ObjsMessageAttachments {
    self.image_height = Some(image_height);
    self
  }

  pub fn image_height(&self) -> Option<&i32> {
    self.image_height.as_ref()
  }

  pub fn reset_image_height(&mut self) {
    self.image_height = None;
  }

  pub fn set_image_url(&mut self, image_url: String) {
    self.image_url = Some(image_url);
  }

  pub fn with_image_url(mut self, image_url: String) -> ObjsMessageAttachments {
    self.image_url = Some(image_url);
    self
  }

  pub fn image_url(&self) -> Option<&String> {
    self.image_url.as_ref()
  }

  pub fn reset_image_url(&mut self) {
    self.image_url = None;
  }

  pub fn set_image_width(&mut self, image_width: i32) {
    self.image_width = Some(image_width);
  }

  pub fn with_image_width(mut self, image_width: i32) -> ObjsMessageAttachments {
    self.image_width = Some(image_width);
    self
  }

  pub fn image_width(&self) -> Option<&i32> {
    self.image_width.as_ref()
  }

  pub fn reset_image_width(&mut self) {
    self.image_width = None;
  }

}



